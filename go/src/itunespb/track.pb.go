// Code generated by protoc-gen-go. DO NOT EDIT.
// source: track.proto

package itunespb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Track struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Album                *string  `protobuf:"bytes,2,opt,name=album" json:"album,omitempty"`
	AlbumArtist          *string  `protobuf:"bytes,3,opt,name=album_artist,json=albumArtist" json:"album_artist,omitempty"`
	AlbumRating          *int32   `protobuf:"varint,4,opt,name=album_rating,json=albumRating" json:"album_rating,omitempty"`
	AlbumRatingComputed  *bool    `protobuf:"varint,5,opt,name=album_rating_computed,json=albumRatingComputed" json:"album_rating_computed,omitempty"`
	Artist               *string  `protobuf:"bytes,6,opt,name=artist" json:"artist,omitempty"`
	ArtworkCount         *int32   `protobuf:"varint,7,opt,name=artwork_count,json=artworkCount" json:"artwork_count,omitempty"`
	Bpm                  *int32   `protobuf:"varint,8,opt,name=bpm" json:"bpm,omitempty"`
	BitRate              *int32   `protobuf:"varint,9,opt,name=bit_rate,json=bitRate" json:"bit_rate,omitempty"`
	Clean                *bool    `protobuf:"varint,10,opt,name=clean" json:"clean,omitempty"`
	Comments             *string  `protobuf:"bytes,11,opt,name=comments" json:"comments,omitempty"`
	Compilation          *bool    `protobuf:"varint,12,opt,name=compilation" json:"compilation,omitempty"`
	Composer             *string  `protobuf:"bytes,13,opt,name=composer" json:"composer,omitempty"`
	ContentRating        *string  `protobuf:"bytes,14,opt,name=content_rating,json=contentRating" json:"content_rating,omitempty"`
	Date                 *Time    `protobuf:"bytes,15,opt,name=date" json:"date,omitempty"`
	DateAdded            *Time    `protobuf:"bytes,16,opt,name=date_added,json=dateAdded" json:"date_added,omitempty"`
	DateModified         *Time    `protobuf:"bytes,17,opt,name=date_modified,json=dateModified" json:"date_modified,omitempty"`
	Disabled             *bool    `protobuf:"varint,18,opt,name=disabled" json:"disabled,omitempty"`
	DiscCount            *int32   `protobuf:"varint,19,opt,name=disc_count,json=discCount" json:"disc_count,omitempty"`
	DiscNumber           *int32   `protobuf:"varint,20,opt,name=disc_number,json=discNumber" json:"disc_number,omitempty"`
	Episode              *string  `protobuf:"bytes,21,opt,name=episode" json:"episode,omitempty"`
	EpisodeOrder         *int32   `protobuf:"varint,22,opt,name=episode_order,json=episodeOrder" json:"episode_order,omitempty"`
	Explicit             *bool    `protobuf:"varint,23,opt,name=explicit" json:"explicit,omitempty"`
	FileFolderCount      *int32   `protobuf:"varint,24,opt,name=file_folder_count,json=fileFolderCount" json:"file_folder_count,omitempty"`
	FileType             *int32   `protobuf:"varint,25,opt,name=file_type,json=fileType" json:"file_type,omitempty"`
	Genre                *string  `protobuf:"bytes,26,opt,name=genre" json:"genre,omitempty"`
	Grouping             *string  `protobuf:"bytes,27,opt,name=grouping" json:"grouping,omitempty"`
	HasVideo             *bool    `protobuf:"varint,28,opt,name=has_video,json=hasVideo" json:"has_video,omitempty"`
	Kind                 *string  `protobuf:"bytes,29,opt,name=kind" json:"kind,omitempty"`
	LibraryFolderCount   *int32   `protobuf:"varint,30,opt,name=library_folder_count,json=libraryFolderCount" json:"library_folder_count,omitempty"`
	Location             *string  `protobuf:"bytes,31,opt,name=location" json:"location,omitempty"`
	Master               *bool    `protobuf:"varint,32,opt,name=master" json:"master,omitempty"`
	Movie                *bool    `protobuf:"varint,33,opt,name=movie" json:"movie,omitempty"`
	MusicVideo           *bool    `protobuf:"varint,34,opt,name=music_video,json=musicVideo" json:"music_video,omitempty"`
	Name                 *string  `protobuf:"bytes,35,opt,name=name" json:"name,omitempty"`
	PartOfGaplessAlbum   *bool    `protobuf:"varint,36,opt,name=part_of_gapless_album,json=partOfGaplessAlbum" json:"part_of_gapless_album,omitempty"`
	PersistentId         *uint64  `protobuf:"varint,37,opt,name=persistent_id,json=persistentId" json:"persistent_id,omitempty"`
	PlayCount            *int32   `protobuf:"varint,38,opt,name=play_count,json=playCount" json:"play_count,omitempty"`
	PlayDateGarbage      *int32   `protobuf:"varint,39,opt,name=play_date_garbage,json=playDateGarbage" json:"play_date_garbage,omitempty"`
	PlayDate             *Time    `protobuf:"bytes,40,opt,name=play_date,json=playDate" json:"play_date,omitempty"`
	Podcast              *bool    `protobuf:"varint,41,opt,name=podcast" json:"podcast,omitempty"`
	Protected            *bool    `protobuf:"varint,42,opt,name=protected" json:"protected,omitempty"`
	Purchased            *bool    `protobuf:"varint,43,opt,name=purchased" json:"purchased,omitempty"`
	PurchaseDate         *Time    `protobuf:"bytes,44,opt,name=purchase_date,json=purchaseDate" json:"purchase_date,omitempty"`
	Rating               *int32   `protobuf:"varint,45,opt,name=rating" json:"rating,omitempty"`
	RatingComputed       *bool    `protobuf:"varint,46,opt,name=rating_computed,json=ratingComputed" json:"rating_computed,omitempty"`
	ReleaseDate          *Time    `protobuf:"bytes,47,opt,name=release_date,json=releaseDate" json:"release_date,omitempty"`
	SampleRate           *int32   `protobuf:"varint,48,opt,name=sample_rate,json=sampleRate" json:"sample_rate,omitempty"`
	Season               *int32   `protobuf:"varint,49,opt,name=season" json:"season,omitempty"`
	Series               *string  `protobuf:"bytes,50,opt,name=series" json:"series,omitempty"`
	Size                 *int64   `protobuf:"varint,51,opt,name=size" json:"size,omitempty"`
	SkipCount            *int32   `protobuf:"varint,52,opt,name=skip_count,json=skipCount" json:"skip_count,omitempty"`
	SkipDate             *Time    `protobuf:"bytes,53,opt,name=skip_date,json=skipDate" json:"skip_date,omitempty"`
	SortAlbum            *string  `protobuf:"bytes,54,opt,name=sort_album,json=sortAlbum" json:"sort_album,omitempty"`
	SortAlbumArtist      *string  `protobuf:"bytes,55,opt,name=sort_album_artist,json=sortAlbumArtist" json:"sort_album_artist,omitempty"`
	SortArtist           *string  `protobuf:"bytes,56,opt,name=sort_artist,json=sortArtist" json:"sort_artist,omitempty"`
	SortComposer         *string  `protobuf:"bytes,57,opt,name=sort_composer,json=sortComposer" json:"sort_composer,omitempty"`
	SortName             *string  `protobuf:"bytes,58,opt,name=sort_name,json=sortName" json:"sort_name,omitempty"`
	SortSeries           *string  `protobuf:"bytes,59,opt,name=sort_series,json=sortSeries" json:"sort_series,omitempty"`
	StopTime             *int32   `protobuf:"varint,60,opt,name=stop_time,json=stopTime" json:"stop_time,omitempty"`
	TvShow               *bool    `protobuf:"varint,61,opt,name=tv_show,json=tvShow" json:"tv_show,omitempty"`
	TotalTime            *int32   `protobuf:"varint,62,opt,name=total_time,json=totalTime" json:"total_time,omitempty"`
	TrackCount           *int32   `protobuf:"varint,63,opt,name=track_count,json=trackCount" json:"track_count,omitempty"`
	TrackId              *int32   `protobuf:"varint,64,opt,name=track_id,json=trackId" json:"track_id,omitempty"`
	TrackNumber          *int32   `protobuf:"varint,65,opt,name=track_number,json=trackNumber" json:"track_number,omitempty"`
	TrackType            *string  `protobuf:"bytes,66,opt,name=track_type,json=trackType" json:"track_type,omitempty"`
	Unplayed             *bool    `protobuf:"varint,67,opt,name=unplayed" json:"unplayed,omitempty"`
	VolumeAdjustment     *int32   `protobuf:"varint,68,opt,name=volume_adjustment,json=volumeAdjustment" json:"volume_adjustment,omitempty"`
	Work                 *string  `protobuf:"bytes,69,opt,name=work" json:"work,omitempty"`
	Year                 *int32   `protobuf:"varint,70,opt,name=year" json:"year,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Track) Reset()         { *m = Track{} }
func (m *Track) String() string { return proto.CompactTextString(m) }
func (*Track) ProtoMessage()    {}
func (*Track) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4b44cacdae97aca, []int{0}
}

func (m *Track) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Track.Unmarshal(m, b)
}
func (m *Track) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Track.Marshal(b, m, deterministic)
}
func (m *Track) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Track.Merge(m, src)
}
func (m *Track) XXX_Size() int {
	return xxx_messageInfo_Track.Size(m)
}
func (m *Track) XXX_DiscardUnknown() {
	xxx_messageInfo_Track.DiscardUnknown(m)
}

var xxx_messageInfo_Track proto.InternalMessageInfo

func (m *Track) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Track) GetAlbum() string {
	if m != nil && m.Album != nil {
		return *m.Album
	}
	return ""
}

func (m *Track) GetAlbumArtist() string {
	if m != nil && m.AlbumArtist != nil {
		return *m.AlbumArtist
	}
	return ""
}

func (m *Track) GetAlbumRating() int32 {
	if m != nil && m.AlbumRating != nil {
		return *m.AlbumRating
	}
	return 0
}

func (m *Track) GetAlbumRatingComputed() bool {
	if m != nil && m.AlbumRatingComputed != nil {
		return *m.AlbumRatingComputed
	}
	return false
}

func (m *Track) GetArtist() string {
	if m != nil && m.Artist != nil {
		return *m.Artist
	}
	return ""
}

func (m *Track) GetArtworkCount() int32 {
	if m != nil && m.ArtworkCount != nil {
		return *m.ArtworkCount
	}
	return 0
}

func (m *Track) GetBpm() int32 {
	if m != nil && m.Bpm != nil {
		return *m.Bpm
	}
	return 0
}

func (m *Track) GetBitRate() int32 {
	if m != nil && m.BitRate != nil {
		return *m.BitRate
	}
	return 0
}

func (m *Track) GetClean() bool {
	if m != nil && m.Clean != nil {
		return *m.Clean
	}
	return false
}

func (m *Track) GetComments() string {
	if m != nil && m.Comments != nil {
		return *m.Comments
	}
	return ""
}

func (m *Track) GetCompilation() bool {
	if m != nil && m.Compilation != nil {
		return *m.Compilation
	}
	return false
}

func (m *Track) GetComposer() string {
	if m != nil && m.Composer != nil {
		return *m.Composer
	}
	return ""
}

func (m *Track) GetContentRating() string {
	if m != nil && m.ContentRating != nil {
		return *m.ContentRating
	}
	return ""
}

func (m *Track) GetDate() *Time {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *Track) GetDateAdded() *Time {
	if m != nil {
		return m.DateAdded
	}
	return nil
}

func (m *Track) GetDateModified() *Time {
	if m != nil {
		return m.DateModified
	}
	return nil
}

func (m *Track) GetDisabled() bool {
	if m != nil && m.Disabled != nil {
		return *m.Disabled
	}
	return false
}

func (m *Track) GetDiscCount() int32 {
	if m != nil && m.DiscCount != nil {
		return *m.DiscCount
	}
	return 0
}

func (m *Track) GetDiscNumber() int32 {
	if m != nil && m.DiscNumber != nil {
		return *m.DiscNumber
	}
	return 0
}

func (m *Track) GetEpisode() string {
	if m != nil && m.Episode != nil {
		return *m.Episode
	}
	return ""
}

func (m *Track) GetEpisodeOrder() int32 {
	if m != nil && m.EpisodeOrder != nil {
		return *m.EpisodeOrder
	}
	return 0
}

func (m *Track) GetExplicit() bool {
	if m != nil && m.Explicit != nil {
		return *m.Explicit
	}
	return false
}

func (m *Track) GetFileFolderCount() int32 {
	if m != nil && m.FileFolderCount != nil {
		return *m.FileFolderCount
	}
	return 0
}

func (m *Track) GetFileType() int32 {
	if m != nil && m.FileType != nil {
		return *m.FileType
	}
	return 0
}

func (m *Track) GetGenre() string {
	if m != nil && m.Genre != nil {
		return *m.Genre
	}
	return ""
}

func (m *Track) GetGrouping() string {
	if m != nil && m.Grouping != nil {
		return *m.Grouping
	}
	return ""
}

func (m *Track) GetHasVideo() bool {
	if m != nil && m.HasVideo != nil {
		return *m.HasVideo
	}
	return false
}

func (m *Track) GetKind() string {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return ""
}

func (m *Track) GetLibraryFolderCount() int32 {
	if m != nil && m.LibraryFolderCount != nil {
		return *m.LibraryFolderCount
	}
	return 0
}

func (m *Track) GetLocation() string {
	if m != nil && m.Location != nil {
		return *m.Location
	}
	return ""
}

func (m *Track) GetMaster() bool {
	if m != nil && m.Master != nil {
		return *m.Master
	}
	return false
}

func (m *Track) GetMovie() bool {
	if m != nil && m.Movie != nil {
		return *m.Movie
	}
	return false
}

func (m *Track) GetMusicVideo() bool {
	if m != nil && m.MusicVideo != nil {
		return *m.MusicVideo
	}
	return false
}

func (m *Track) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Track) GetPartOfGaplessAlbum() bool {
	if m != nil && m.PartOfGaplessAlbum != nil {
		return *m.PartOfGaplessAlbum
	}
	return false
}

func (m *Track) GetPersistentId() uint64 {
	if m != nil && m.PersistentId != nil {
		return *m.PersistentId
	}
	return 0
}

func (m *Track) GetPlayCount() int32 {
	if m != nil && m.PlayCount != nil {
		return *m.PlayCount
	}
	return 0
}

func (m *Track) GetPlayDateGarbage() int32 {
	if m != nil && m.PlayDateGarbage != nil {
		return *m.PlayDateGarbage
	}
	return 0
}

func (m *Track) GetPlayDate() *Time {
	if m != nil {
		return m.PlayDate
	}
	return nil
}

func (m *Track) GetPodcast() bool {
	if m != nil && m.Podcast != nil {
		return *m.Podcast
	}
	return false
}

func (m *Track) GetProtected() bool {
	if m != nil && m.Protected != nil {
		return *m.Protected
	}
	return false
}

func (m *Track) GetPurchased() bool {
	if m != nil && m.Purchased != nil {
		return *m.Purchased
	}
	return false
}

func (m *Track) GetPurchaseDate() *Time {
	if m != nil {
		return m.PurchaseDate
	}
	return nil
}

func (m *Track) GetRating() int32 {
	if m != nil && m.Rating != nil {
		return *m.Rating
	}
	return 0
}

func (m *Track) GetRatingComputed() bool {
	if m != nil && m.RatingComputed != nil {
		return *m.RatingComputed
	}
	return false
}

func (m *Track) GetReleaseDate() *Time {
	if m != nil {
		return m.ReleaseDate
	}
	return nil
}

func (m *Track) GetSampleRate() int32 {
	if m != nil && m.SampleRate != nil {
		return *m.SampleRate
	}
	return 0
}

func (m *Track) GetSeason() int32 {
	if m != nil && m.Season != nil {
		return *m.Season
	}
	return 0
}

func (m *Track) GetSeries() string {
	if m != nil && m.Series != nil {
		return *m.Series
	}
	return ""
}

func (m *Track) GetSize() int64 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

func (m *Track) GetSkipCount() int32 {
	if m != nil && m.SkipCount != nil {
		return *m.SkipCount
	}
	return 0
}

func (m *Track) GetSkipDate() *Time {
	if m != nil {
		return m.SkipDate
	}
	return nil
}

func (m *Track) GetSortAlbum() string {
	if m != nil && m.SortAlbum != nil {
		return *m.SortAlbum
	}
	return ""
}

func (m *Track) GetSortAlbumArtist() string {
	if m != nil && m.SortAlbumArtist != nil {
		return *m.SortAlbumArtist
	}
	return ""
}

func (m *Track) GetSortArtist() string {
	if m != nil && m.SortArtist != nil {
		return *m.SortArtist
	}
	return ""
}

func (m *Track) GetSortComposer() string {
	if m != nil && m.SortComposer != nil {
		return *m.SortComposer
	}
	return ""
}

func (m *Track) GetSortName() string {
	if m != nil && m.SortName != nil {
		return *m.SortName
	}
	return ""
}

func (m *Track) GetSortSeries() string {
	if m != nil && m.SortSeries != nil {
		return *m.SortSeries
	}
	return ""
}

func (m *Track) GetStopTime() int32 {
	if m != nil && m.StopTime != nil {
		return *m.StopTime
	}
	return 0
}

func (m *Track) GetTvShow() bool {
	if m != nil && m.TvShow != nil {
		return *m.TvShow
	}
	return false
}

func (m *Track) GetTotalTime() int32 {
	if m != nil && m.TotalTime != nil {
		return *m.TotalTime
	}
	return 0
}

func (m *Track) GetTrackCount() int32 {
	if m != nil && m.TrackCount != nil {
		return *m.TrackCount
	}
	return 0
}

func (m *Track) GetTrackId() int32 {
	if m != nil && m.TrackId != nil {
		return *m.TrackId
	}
	return 0
}

func (m *Track) GetTrackNumber() int32 {
	if m != nil && m.TrackNumber != nil {
		return *m.TrackNumber
	}
	return 0
}

func (m *Track) GetTrackType() string {
	if m != nil && m.TrackType != nil {
		return *m.TrackType
	}
	return ""
}

func (m *Track) GetUnplayed() bool {
	if m != nil && m.Unplayed != nil {
		return *m.Unplayed
	}
	return false
}

func (m *Track) GetVolumeAdjustment() int32 {
	if m != nil && m.VolumeAdjustment != nil {
		return *m.VolumeAdjustment
	}
	return 0
}

func (m *Track) GetWork() string {
	if m != nil && m.Work != nil {
		return *m.Work
	}
	return ""
}

func (m *Track) GetYear() int32 {
	if m != nil && m.Year != nil {
		return *m.Year
	}
	return 0
}

func init() {
	proto.RegisterType((*Track)(nil), "itunespb.Track")
}

func init() { proto.RegisterFile("track.proto", fileDescriptor_f4b44cacdae97aca) }

var fileDescriptor_f4b44cacdae97aca = []byte{
	// 1085 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x56, 0x6d, 0x53, 0x1b, 0x37,
	0x10, 0x1e, 0x13, 0x5e, 0xec, 0xb5, 0x79, 0xb1, 0x02, 0x44, 0x40, 0x52, 0x1c, 0x68, 0x1a, 0x17,
	0x1a, 0x1a, 0x48, 0xdf, 0xdf, 0x5d, 0xd2, 0x64, 0xf2, 0xa1, 0xc9, 0x8c, 0xc3, 0xf4, 0xeb, 0x8d,
	0x7c, 0x27, 0x8c, 0xca, 0xdd, 0xe9, 0x46, 0x92, 0xa1, 0xf4, 0x8f, 0xf6, 0xef, 0x74, 0x76, 0x57,
	0x67, 0x48, 0xc6, 0x9f, 0xac, 0xe7, 0xd9, 0x47, 0xb7, 0xbb, 0xda, 0xd5, 0xca, 0xd0, 0x0e, 0x4e,
	0xa5, 0x97, 0x47, 0x95, 0xb3, 0xc1, 0x8a, 0xa6, 0x09, 0x93, 0x52, 0xfb, 0x6a, 0xb4, 0x0d, 0xc1,
	0x14, 0x9a, 0xd9, 0xbd, 0xff, 0xba, 0xb0, 0x70, 0x86, 0x2a, 0xb1, 0x02, 0x73, 0x26, 0x93, 0x8d,
	0x5e, 0xa3, 0xbf, 0x30, 0x9c, 0x33, 0x99, 0x58, 0x87, 0x05, 0x95, 0x8f, 0x26, 0x85, 0x9c, 0xeb,
	0x35, 0xfa, 0xad, 0x21, 0x03, 0xf1, 0x18, 0x3a, 0xb4, 0x48, 0x94, 0x0b, 0xc6, 0x07, 0x79, 0x8f,
	0x8c, 0x6d, 0xe2, 0x06, 0x44, 0xdd, 0x4a, 0x9c, 0x0a, 0xa6, 0x1c, 0xcb, 0x79, 0xfa, 0x24, 0x4b,
	0x86, 0x44, 0x89, 0x13, 0xd8, 0xb8, 0x2b, 0x49, 0x52, 0x5b, 0x54, 0x93, 0xa0, 0x33, 0xb9, 0xd0,
	0x6b, 0xf4, 0x9b, 0xc3, 0xfb, 0x77, 0xb4, 0xa7, 0xd1, 0x24, 0x36, 0x61, 0x31, 0xfa, 0x5c, 0x24,
	0x9f, 0x11, 0x89, 0x7d, 0x58, 0x56, 0x2e, 0x5c, 0x5b, 0x77, 0x99, 0xa4, 0x76, 0x52, 0x06, 0xb9,
	0x44, 0xfe, 0x3a, 0x91, 0x3c, 0x45, 0x4e, 0xac, 0xc1, 0xbd, 0x51, 0x55, 0xc8, 0x26, 0x99, 0x70,
	0x29, 0xb6, 0xa0, 0x39, 0x32, 0x01, 0x03, 0xd0, 0xb2, 0x45, 0xf4, 0xd2, 0xc8, 0x84, 0xa1, 0x0a,
	0x1a, 0x33, 0x4f, 0x73, 0xad, 0x4a, 0x09, 0x14, 0x0d, 0x03, 0xb1, 0x0d, 0xcd, 0xd4, 0x16, 0x85,
	0x2e, 0x83, 0x97, 0x6d, 0x8a, 0x60, 0x8a, 0x45, 0x0f, 0xda, 0x98, 0x82, 0xc9, 0x55, 0x30, 0xb6,
	0x94, 0x1d, 0xda, 0x77, 0x97, 0x8a, 0xbb, 0x2b, 0xeb, 0xb5, 0x93, 0xcb, 0xd3, 0xdd, 0x84, 0xc5,
	0x13, 0x58, 0x49, 0x6d, 0x19, 0x74, 0x19, 0xea, 0x23, 0x5b, 0x21, 0xc5, 0x72, 0x64, 0xe3, 0xa1,
	0xed, 0xc1, 0x7c, 0x86, 0xd1, 0xae, 0xf6, 0x1a, 0xfd, 0xf6, 0xc9, 0xca, 0x51, 0x5d, 0xcf, 0xa3,
	0x33, 0x53, 0xe8, 0x21, 0xd9, 0xc4, 0x33, 0x00, 0xfc, 0x4d, 0x54, 0x96, 0xe9, 0x4c, 0xae, 0xcd,
	0x54, 0xb6, 0x50, 0x31, 0x40, 0x81, 0x78, 0x01, 0xcb, 0x24, 0x2f, 0x6c, 0x66, 0xce, 0x8d, 0xce,
	0x64, 0x77, 0xe6, 0x8e, 0x0e, 0x8a, 0xfe, 0x8c, 0x1a, 0x4c, 0x25, 0x33, 0x5e, 0x8d, 0x72, 0x9d,
	0x49, 0x41, 0x99, 0x4e, 0xb1, 0x78, 0x04, 0x90, 0x19, 0x9f, 0xc6, 0x4a, 0xdc, 0xa7, 0x73, 0x6d,
	0x21, 0xc3, 0x65, 0xd8, 0x85, 0x36, 0x99, 0xcb, 0x49, 0x31, 0xd2, 0x4e, 0xae, 0x93, 0x9d, 0x76,
	0xbc, 0x25, 0x46, 0x48, 0x58, 0xd2, 0x95, 0xf1, 0x36, 0xd3, 0x72, 0x83, 0xce, 0xa0, 0x86, 0x58,
	0xe6, 0xb8, 0x4c, 0xac, 0xcb, 0xb4, 0x93, 0x9b, 0x5c, 0xe6, 0x48, 0xbe, 0x43, 0x0e, 0x43, 0xd3,
	0xff, 0x54, 0xb9, 0x49, 0x4d, 0x90, 0x0f, 0x38, 0xb4, 0x1a, 0x8b, 0x03, 0xe8, 0x9e, 0x9b, 0x5c,
	0x27, 0xe7, 0x36, 0xcf, 0xb4, 0x8b, 0x11, 0x4a, 0xfa, 0xc8, 0x2a, 0x1a, 0x5e, 0x11, 0xcf, 0x71,
	0xee, 0x40, 0x8b, 0xb4, 0xe1, 0xa6, 0xd2, 0x72, 0x8b, 0x34, 0x4d, 0x24, 0xce, 0x6e, 0x2a, 0x6a,
	0x8f, 0xb1, 0x2e, 0x9d, 0x96, 0xdb, 0x7c, 0x31, 0x08, 0xa0, 0xeb, 0xb1, 0xb3, 0x93, 0x0a, 0xcb,
	0xb7, 0xc3, 0x05, 0xae, 0x31, 0x7e, 0xee, 0x42, 0xf9, 0xe4, 0xca, 0x64, 0xda, 0xca, 0x87, 0x1c,
	0xd7, 0x85, 0xf2, 0x7f, 0x21, 0x16, 0x02, 0xe6, 0x2f, 0x4d, 0x99, 0xc9, 0x47, 0xb4, 0x89, 0xd6,
	0xe2, 0x39, 0xac, 0xe7, 0x66, 0xe4, 0x94, 0xbb, 0xf9, 0x30, 0xdc, 0x4f, 0x28, 0x14, 0x11, 0x6d,
	0x77, 0x23, 0xde, 0x86, 0x66, 0x6e, 0x53, 0x6e, 0xbf, 0x5d, 0x76, 0x5f, 0x63, 0xbc, 0x39, 0x85,
	0xf2, 0x41, 0x3b, 0xd9, 0x23, 0xdf, 0x11, 0x61, 0x22, 0x85, 0xbd, 0x32, 0x5a, 0x3e, 0xe6, 0x3e,
	0x27, 0x80, 0x35, 0x2a, 0x26, 0xde, 0xa4, 0x31, 0xdc, 0x3d, 0xb2, 0x01, 0x51, 0xd3, 0x80, 0x4b,
	0x55, 0x68, 0xb9, 0xcf, 0x01, 0xe3, 0x5a, 0x1c, 0xc3, 0x46, 0xa5, 0x5c, 0x48, 0xec, 0x79, 0x32,
	0x56, 0x55, 0xae, 0xbd, 0x4f, 0x78, 0x78, 0x7c, 0x4a, 0xdb, 0x05, 0x1a, 0xdf, 0x9d, 0xbf, 0x66,
	0xd3, 0x80, 0x26, 0xc9, 0x3e, 0x2c, 0x57, 0xda, 0x79, 0xe3, 0xa9, 0xf1, 0x4d, 0x26, 0x9f, 0xf4,
	0x1a, 0xfd, 0xf9, 0x61, 0xe7, 0x96, 0x7c, 0x43, 0xfd, 0x54, 0xe5, 0xea, 0x26, 0xa6, 0xff, 0x19,
	0xf7, 0x13, 0x32, 0x9c, 0xf5, 0x01, 0x74, 0xc9, 0x4c, 0x4d, 0x3c, 0x56, 0x6e, 0xa4, 0xc6, 0x5a,
	0x3e, 0xe5, 0x9a, 0xa2, 0xe1, 0xa5, 0x0a, 0xfa, 0x35, 0xd3, 0xe2, 0x10, 0x5a, 0x53, 0xad, 0xec,
	0xcf, 0xec, 0xf3, 0x66, 0xbd, 0x07, 0xfb, 0xb0, 0xb2, 0x59, 0xaa, 0x7c, 0x90, 0x9f, 0x53, 0x06,
	0x35, 0x14, 0x0f, 0xa1, 0x85, 0x93, 0x53, 0xa7, 0x38, 0xae, 0x0e, 0xc8, 0x76, 0x4b, 0x90, 0x75,
	0xe2, 0xd2, 0x0b, 0xe5, 0x75, 0x26, 0x0f, 0xa3, 0xb5, 0x26, 0xf0, 0xba, 0xd5, 0x80, 0xc3, 0xf8,
	0x62, 0xf6, 0x75, 0xab, 0x45, 0x14, 0xca, 0x26, 0x2c, 0xc6, 0xa9, 0xf0, 0x8c, 0x12, 0x8b, 0x48,
	0x3c, 0x85, 0xd5, 0x8f, 0xa7, 0xe7, 0x11, 0x39, 0x5c, 0x71, 0x1f, 0x0e, 0xce, 0x63, 0xe8, 0x38,
	0x9d, 0xeb, 0xa9, 0xd3, 0x2f, 0x67, 0x3a, 0x6d, 0x47, 0x0d, 0xf9, 0xdc, 0x85, 0xb6, 0x57, 0x45,
	0x95, 0x6b, 0x9e, 0x8f, 0xcf, 0xf9, 0x9e, 0x32, 0x35, 0x8c, 0x41, 0x79, 0xad, 0xbc, 0x2d, 0xe5,
	0x31, 0x07, 0xc5, 0x88, 0x79, 0x67, 0xb4, 0x97, 0x27, 0x3c, 0xa4, 0x19, 0x61, 0xcf, 0x78, 0xf3,
	0xaf, 0x96, 0x2f, 0x48, 0x4d, 0x6b, 0xac, 0xad, 0xbf, 0x34, 0x55, 0xac, 0xed, 0x57, 0x5c, 0x5b,
	0x64, 0xb8, 0xb6, 0x87, 0x40, 0x80, 0x63, 0xfe, 0x7a, 0x76, 0xbd, 0x50, 0x40, 0x01, 0xe3, 0xb7,
	0xac, 0x0b, 0xb1, 0xe9, 0xbe, 0x21, 0xdf, 0x2d, 0x64, 0xb8, 0xd7, 0x0e, 0xa0, 0x7b, 0x6b, 0xae,
	0x9f, 0xae, 0x6f, 0x49, 0xb5, 0x3a, 0x55, 0xc5, 0xe7, 0x0b, 0x73, 0x27, 0x2d, 0xab, 0xbe, 0x23,
	0x15, 0x7d, 0x7d, 0x30, 0x7d, 0x70, 0x48, 0x30, 0x9d, 0xe7, 0xdf, 0x93, 0xa4, 0x83, 0xe4, 0x69,
	0x3d, 0xd3, 0x77, 0x80, 0xdc, 0x27, 0x74, 0x53, 0x7e, 0xe0, 0x0b, 0x89, 0xc4, 0x5b, 0xbc, 0x2d,
	0xb5, 0x8b, 0x78, 0x54, 0x3f, 0xde, 0xba, 0x78, 0xcf, 0xc7, 0x85, 0xbb, 0x83, 0xad, 0x12, 0x7c,
	0xa8, 0xe5, 0x4f, 0x3c, 0x7f, 0x90, 0xc0, 0xac, 0xc5, 0x03, 0x58, 0x0a, 0x57, 0x89, 0xbf, 0xb0,
	0xd7, 0xf2, 0x67, 0xbe, 0xcf, 0xe1, 0xea, 0xfd, 0x85, 0xbd, 0xc6, 0x43, 0x08, 0x36, 0xa8, 0x9c,
	0xb7, 0xfd, 0xc2, 0x07, 0x4a, 0x0c, 0xed, 0xdb, 0x8d, 0xff, 0x07, 0xe2, 0x81, 0xff, 0xca, 0x45,
	0x25, 0x8a, 0x4f, 0x7c, 0x0b, 0x9a, 0x2c, 0x30, 0x99, 0xfc, 0x8d, 0x9f, 0x44, 0xc2, 0x6f, 0x32,
	0x7c, 0xd3, 0xd9, 0x14, 0x27, 0xf7, 0x80, 0xdf, 0x74, 0xe2, 0xe2, 0xe8, 0x46, 0xef, 0x24, 0xa1,
	0xa1, 0xf9, 0x3b, 0x97, 0x80, 0x18, 0x9a, 0x9a, 0xdb, 0xd0, 0x9c, 0x94, 0x78, 0xbf, 0x74, 0x26,
	0x4f, 0x79, 0x04, 0xd6, 0x58, 0x1c, 0x42, 0xf7, 0xca, 0xe6, 0x93, 0x02, 0xdf, 0xad, 0xbf, 0x27,
	0x3e, 0xe0, 0xa3, 0x2a, 0x5f, 0x92, 0x8b, 0x35, 0x36, 0x0c, 0xa6, 0x3c, 0xb6, 0x12, 0xbe, 0xeb,
	0xf2, 0x0f, 0x1e, 0x3f, 0xb8, 0x46, 0xee, 0x46, 0x2b, 0x27, 0x5f, 0x71, 0x7b, 0xe1, 0xfa, 0xff,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x8c, 0xc6, 0xae, 0x68, 0xfd, 0x08, 0x00, 0x00,
}
