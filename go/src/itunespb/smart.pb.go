// Code generated by protoc-gen-go. DO NOT EDIT.
// source: smart.proto

package itunespb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MediaKind int32

const (
	MediaKind_Music           MediaKind = 1
	MediaKind_Movie           MediaKind = 2
	MediaKind_Podcast         MediaKind = 4
	MediaKind_Audiobook       MediaKind = 8
	MediaKind_MusicVideo      MediaKind = 32
	MediaKind_TVShow          MediaKind = 64
	MediaKind_HomeVideo       MediaKind = 1024
	MediaKind_ITunesExtras    MediaKind = 65536
	MediaKind_VoiceMemo       MediaKind = 1048576
	MediaKind_ITunesU         MediaKind = 2097152
	MediaKind_Book            MediaKind = 12582912
	MediaKind_BookOrAudiobook MediaKind = 12582920
	MediaKind_OtherMusic      MediaKind = 1057201
	MediaKind_UndesiredMusic  MediaKind = 2129924
	MediaKind_UndesiredOther  MediaKind = 2138116
)

var MediaKind_name = map[int32]string{
	1:        "Music",
	2:        "Movie",
	4:        "Podcast",
	8:        "Audiobook",
	32:       "MusicVideo",
	64:       "TVShow",
	1024:     "HomeVideo",
	65536:    "ITunesExtras",
	1048576:  "VoiceMemo",
	2097152:  "ITunesU",
	12582912: "Book",
	12582920: "BookOrAudiobook",
	1057201:  "OtherMusic",
	2129924:  "UndesiredMusic",
	2138116:  "UndesiredOther",
}

var MediaKind_value = map[string]int32{
	"Music":           1,
	"Movie":           2,
	"Podcast":         4,
	"Audiobook":       8,
	"MusicVideo":      32,
	"TVShow":          64,
	"HomeVideo":       1024,
	"ITunesExtras":    65536,
	"VoiceMemo":       1048576,
	"ITunesU":         2097152,
	"Book":            12582912,
	"BookOrAudiobook": 12582920,
	"OtherMusic":      1057201,
	"UndesiredMusic":  2129924,
	"UndesiredOther":  2138116,
}

func (x MediaKind) Enum() *MediaKind {
	p := new(MediaKind)
	*p = x
	return p
}

func (x MediaKind) String() string {
	return proto.EnumName(MediaKind_name, int32(x))
}

func (x *MediaKind) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MediaKind_value, data, "MediaKind")
	if err != nil {
		return err
	}
	*x = MediaKind(value)
	return nil
}

func (MediaKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d57b5fa89539e619, []int{0}
}

type ICloudStatus int32

const (
	ICloudStatus_Purchased  ICloudStatus = 1
	ICloudStatus_Matched    ICloudStatus = 2
	ICloudStatus_Uploaded   ICloudStatus = 3
	ICloudStatus_Ineligible ICloudStatus = 4
	ICloudStatus_LocalOnly  ICloudStatus = 5
	ICloudStatus_Duplicate  ICloudStatus = 6
)

var ICloudStatus_name = map[int32]string{
	1: "Purchased",
	2: "Matched",
	3: "Uploaded",
	4: "Ineligible",
	5: "LocalOnly",
	6: "Duplicate",
}

var ICloudStatus_value = map[string]int32{
	"Purchased":  1,
	"Matched":    2,
	"Uploaded":   3,
	"Ineligible": 4,
	"LocalOnly":  5,
	"Duplicate":  6,
}

func (x ICloudStatus) Enum() *ICloudStatus {
	p := new(ICloudStatus)
	*p = x
	return p
}

func (x ICloudStatus) String() string {
	return proto.EnumName(ICloudStatus_name, int32(x))
}

func (x *ICloudStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ICloudStatus_value, data, "ICloudStatus")
	if err != nil {
		return err
	}
	*x = ICloudStatus(value)
	return nil
}

func (ICloudStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d57b5fa89539e619, []int{1}
}

type LoveStatus int32

const (
	LoveStatus_None     LoveStatus = 0
	LoveStatus_Loved    LoveStatus = 2
	LoveStatus_Disliked LoveStatus = 3
)

var LoveStatus_name = map[int32]string{
	0: "None",
	2: "Loved",
	3: "Disliked",
}

var LoveStatus_value = map[string]int32{
	"None":     0,
	"Loved":    2,
	"Disliked": 3,
}

func (x LoveStatus) Enum() *LoveStatus {
	p := new(LoveStatus)
	*p = x
	return p
}

func (x LoveStatus) String() string {
	return proto.EnumName(LoveStatus_name, int32(x))
}

func (x *LoveStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LoveStatus_value, data, "LoveStatus")
	if err != nil {
		return err
	}
	*x = LoveStatus(value)
	return nil
}

func (LoveStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d57b5fa89539e619, []int{2}
}

type LocationStatus int32

const (
	LocationStatus_Computer LocationStatus = 1
	LocationStatus_iCloud   LocationStatus = 16
)

var LocationStatus_name = map[int32]string{
	1:  "Computer",
	16: "iCloud",
}

var LocationStatus_value = map[string]int32{
	"Computer": 1,
	"iCloud":   16,
}

func (x LocationStatus) Enum() *LocationStatus {
	p := new(LocationStatus)
	*p = x
	return p
}

func (x LocationStatus) String() string {
	return proto.EnumName(LocationStatus_name, int32(x))
}

func (x *LocationStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LocationStatus_value, data, "LocationStatus")
	if err != nil {
		return err
	}
	*x = LocationStatus(value)
	return nil
}

func (LocationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d57b5fa89539e619, []int{3}
}

type Conjunction int32

const (
	Conjunction_AND Conjunction = 0
	Conjunction_OR  Conjunction = 1
)

var Conjunction_name = map[int32]string{
	0: "AND",
	1: "OR",
}

var Conjunction_value = map[string]int32{
	"AND": 0,
	"OR":  1,
}

func (x Conjunction) Enum() *Conjunction {
	p := new(Conjunction)
	*p = x
	return p
}

func (x Conjunction) String() string {
	return proto.EnumName(Conjunction_name, int32(x))
}

func (x *Conjunction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Conjunction_value, data, "Conjunction")
	if err != nil {
		return err
	}
	*x = Conjunction(value)
	return nil
}

func (Conjunction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d57b5fa89539e619, []int{4}
}

type LimitMethod int32

const (
	LimitMethod_minutes LimitMethod = 1
	LimitMethod_MB      LimitMethod = 2
	LimitMethod_items   LimitMethod = 3
	LimitMethod_hours   LimitMethod = 4
	LimitMethod_GB      LimitMethod = 5
)

var LimitMethod_name = map[int32]string{
	1: "minutes",
	2: "MB",
	3: "items",
	4: "hours",
	5: "GB",
}

var LimitMethod_value = map[string]int32{
	"minutes": 1,
	"MB":      2,
	"items":   3,
	"hours":   4,
	"GB":      5,
}

func (x LimitMethod) Enum() *LimitMethod {
	p := new(LimitMethod)
	*p = x
	return p
}

func (x LimitMethod) String() string {
	return proto.EnumName(LimitMethod_name, int32(x))
}

func (x *LimitMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LimitMethod_value, data, "LimitMethod")
	if err != nil {
		return err
	}
	*x = LimitMethod(value)
	return nil
}

func (LimitMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d57b5fa89539e619, []int{5}
}

type SelectionMethod int32

const (
	SelectionMethod_limit_lowest_rating SelectionMethod = 1
	SelectionMethod_limit_random        SelectionMethod = 2
	SelectionMethod_limit_name          SelectionMethod = 5
	SelectionMethod_limit_album         SelectionMethod = 6
	SelectionMethod_limit_artist        SelectionMethod = 7
	SelectionMethod_limit_genre         SelectionMethod = 9
	SelectionMethod_limit_date_added    SelectionMethod = 21
	SelectionMethod_limit_play_count    SelectionMethod = 25
	SelectionMethod_limit_play_date_utc SelectionMethod = 26
	SelectionMethod_limit_rating        SelectionMethod = 28
)

var SelectionMethod_name = map[int32]string{
	1:  "limit_lowest_rating",
	2:  "limit_random",
	5:  "limit_name",
	6:  "limit_album",
	7:  "limit_artist",
	9:  "limit_genre",
	21: "limit_date_added",
	25: "limit_play_count",
	26: "limit_play_date_utc",
	28: "limit_rating",
}

var SelectionMethod_value = map[string]int32{
	"limit_lowest_rating": 1,
	"limit_random":        2,
	"limit_name":          5,
	"limit_album":         6,
	"limit_artist":        7,
	"limit_genre":         9,
	"limit_date_added":    21,
	"limit_play_count":    25,
	"limit_play_date_utc": 26,
	"limit_rating":        28,
}

func (x SelectionMethod) Enum() *SelectionMethod {
	p := new(SelectionMethod)
	*p = x
	return p
}

func (x SelectionMethod) String() string {
	return proto.EnumName(SelectionMethod_name, int32(x))
}

func (x *SelectionMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SelectionMethod_value, data, "SelectionMethod")
	if err != nil {
		return err
	}
	*x = SelectionMethod(value)
	return nil
}

func (SelectionMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d57b5fa89539e619, []int{6}
}

type Field int32

const (
	Field_album                  Field = 3
	Field_album_artist           Field = 71
	Field_artist                 Field = 4
	Field_category               Field = 55
	Field_comments               Field = 14
	Field_composer               Field = 18
	Field_description            Field = 54
	Field_genre                  Field = 8
	Field_grouping               Field = 39
	Field_kind                   Field = 9
	Field_title                  Field = 2
	Field_show                   Field = 62
	Field_sort_album             Field = 79
	Field_sort_albumartist       Field = 81
	Field_sort_composer          Field = 82
	Field_sort_name              Field = 78
	Field_sort_show              Field = 83
	Field_video_rating           Field = 89
	Field_b_p_m                  Field = 35
	Field_bit_rate               Field = 5
	Field_compilation            Field = 31
	Field_disk_number            Field = 24
	Field_plays                  Field = 22
	Field_rating                 Field = 25
	Field_podcast                Field = 57
	Field_sample_rate            Field = 6
	Field_season                 Field = 63
	Field_size                   Field = 12
	Field_skips                  Field = 68
	Field_duration               Field = 13
	Field_track_number           Field = 11
	Field_year                   Field = 7
	Field_has_artwork            Field = 37
	Field_purchased              Field = 41
	Field_checked                Field = 29
	Field_date_added             Field = 16
	Field_date_modified          Field = 10
	Field_last_played            Field = 23
	Field_last_skipped           Field = 69
	Field_media_kind             Field = 60
	Field_playlist_persistent_id Field = 40
	Field_love                   Field = 154
	Field_icloud_status          Field = 134
	Field_location               Field = 133
)

var Field_name = map[int32]string{
	3:   "album",
	71:  "album_artist",
	4:   "artist",
	55:  "category",
	14:  "comments",
	18:  "composer",
	54:  "description",
	8:   "genre",
	39:  "grouping",
	9:   "kind",
	2:   "title",
	62:  "show",
	79:  "sort_album",
	81:  "sort_albumartist",
	82:  "sort_composer",
	78:  "sort_name",
	83:  "sort_show",
	89:  "video_rating",
	35:  "b_p_m",
	5:   "bit_rate",
	31:  "compilation",
	24:  "disk_number",
	22:  "plays",
	25:  "rating",
	57:  "podcast",
	6:   "sample_rate",
	63:  "season",
	12:  "size",
	68:  "skips",
	13:  "duration",
	11:  "track_number",
	7:   "year",
	37:  "has_artwork",
	41:  "purchased",
	29:  "checked",
	16:  "date_added",
	10:  "date_modified",
	23:  "last_played",
	69:  "last_skipped",
	60:  "media_kind",
	40:  "playlist_persistent_id",
	154: "love",
	134: "icloud_status",
	133: "location",
}

var Field_value = map[string]int32{
	"album":                  3,
	"album_artist":           71,
	"artist":                 4,
	"category":               55,
	"comments":               14,
	"composer":               18,
	"description":            54,
	"genre":                  8,
	"grouping":               39,
	"kind":                   9,
	"title":                  2,
	"show":                   62,
	"sort_album":             79,
	"sort_albumartist":       81,
	"sort_composer":          82,
	"sort_name":              78,
	"sort_show":              83,
	"video_rating":           89,
	"b_p_m":                  35,
	"bit_rate":               5,
	"compilation":            31,
	"disk_number":            24,
	"plays":                  22,
	"rating":                 25,
	"podcast":                57,
	"sample_rate":            6,
	"season":                 63,
	"size":                   12,
	"skips":                  68,
	"duration":               13,
	"track_number":           11,
	"year":                   7,
	"has_artwork":            37,
	"purchased":              41,
	"checked":                29,
	"date_added":             16,
	"date_modified":          10,
	"last_played":            23,
	"last_skipped":           69,
	"media_kind":             60,
	"playlist_persistent_id": 40,
	"love":          154,
	"icloud_status": 134,
	"location":      133,
}

func (x Field) Enum() *Field {
	p := new(Field)
	*p = x
	return p
}

func (x Field) String() string {
	return proto.EnumName(Field_name, int32(x))
}

func (x *Field) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Field_value, data, "Field")
	if err != nil {
		return err
	}
	*x = Field(value)
	return nil
}

func (Field) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d57b5fa89539e619, []int{7}
}

type LogicSign int32

const (
	LogicSign_int_pos LogicSign = 0
	LogicSign_str_pos LogicSign = 1
	LogicSign_int_neg LogicSign = 2
	LogicSign_str_neg LogicSign = 3
)

var LogicSign_name = map[int32]string{
	0: "int_pos",
	1: "str_pos",
	2: "int_neg",
	3: "str_neg",
}

var LogicSign_value = map[string]int32{
	"int_pos": 0,
	"str_pos": 1,
	"int_neg": 2,
	"str_neg": 3,
}

func (x LogicSign) Enum() *LogicSign {
	p := new(LogicSign)
	*p = x
	return p
}

func (x LogicSign) String() string {
	return proto.EnumName(LogicSign_name, int32(x))
}

func (x *LogicSign) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LogicSign_value, data, "LogicSign")
	if err != nil {
		return err
	}
	*x = LogicSign(value)
	return nil
}

func (LogicSign) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d57b5fa89539e619, []int{8}
}

type LogicRule int32

const (
	LogicRule_other       LogicRule = 0
	LogicRule_is          LogicRule = 1
	LogicRule_contains    LogicRule = 2
	LogicRule_startswith  LogicRule = 4
	LogicRule_endswith    LogicRule = 8
	LogicRule_greaterthan LogicRule = 16
	LogicRule_lessthan    LogicRule = 64
	LogicRule_between     LogicRule = 256
)

var LogicRule_name = map[int32]string{
	0:   "other",
	1:   "is",
	2:   "contains",
	4:   "startswith",
	8:   "endswith",
	16:  "greaterthan",
	64:  "lessthan",
	256: "between",
}

var LogicRule_value = map[string]int32{
	"other":       0,
	"is":          1,
	"contains":    2,
	"startswith":  4,
	"endswith":    8,
	"greaterthan": 16,
	"lessthan":    64,
	"between":     256,
}

func (x LogicRule) Enum() *LogicRule {
	p := new(LogicRule)
	*p = x
	return p
}

func (x LogicRule) String() string {
	return proto.EnumName(LogicRule_name, int32(x))
}

func (x *LogicRule) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LogicRule_value, data, "LogicRule")
	if err != nil {
		return err
	}
	*x = LogicRule(value)
	return nil
}

func (LogicRule) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d57b5fa89539e619, []int{9}
}

type RuleType int32

const (
	RuleType_RuleType_ruleset_rule    RuleType = 1
	RuleType_RuleType_string_rule     RuleType = 2
	RuleType_RuleType_int_rule        RuleType = 3
	RuleType_RuleType_boolean_rule    RuleType = 4
	RuleType_RuleType_date_rule       RuleType = 5
	RuleType_RuleType_media_kind_rule RuleType = 6
	RuleType_RuleType_playlist_rule   RuleType = 7
	RuleType_RuleType_love_rule       RuleType = 8
	RuleType_RuleType_cloud_rule      RuleType = 9
	RuleType_RuleType_location_rule   RuleType = 10
)

var RuleType_name = map[int32]string{
	1:  "RuleType_ruleset_rule",
	2:  "RuleType_string_rule",
	3:  "RuleType_int_rule",
	4:  "RuleType_boolean_rule",
	5:  "RuleType_date_rule",
	6:  "RuleType_media_kind_rule",
	7:  "RuleType_playlist_rule",
	8:  "RuleType_love_rule",
	9:  "RuleType_cloud_rule",
	10: "RuleType_location_rule",
}

var RuleType_value = map[string]int32{
	"RuleType_ruleset_rule":    1,
	"RuleType_string_rule":     2,
	"RuleType_int_rule":        3,
	"RuleType_boolean_rule":    4,
	"RuleType_date_rule":       5,
	"RuleType_media_kind_rule": 6,
	"RuleType_playlist_rule":   7,
	"RuleType_love_rule":       8,
	"RuleType_cloud_rule":      9,
	"RuleType_location_rule":   10,
}

func (x RuleType) Enum() *RuleType {
	p := new(RuleType)
	*p = x
	return p
}

func (x RuleType) String() string {
	return proto.EnumName(RuleType_name, int32(x))
}

func (x *RuleType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RuleType_value, data, "RuleType")
	if err != nil {
		return err
	}
	*x = RuleType(value)
	return nil
}

func (RuleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d57b5fa89539e619, []int{10}
}

type SmartPlaylistInfo struct {
	CheckedOnly          *bool            `protobuf:"varint,1,opt,name=checked_only,json=checkedOnly" json:"checked_only,omitempty"`
	Descending           *bool            `protobuf:"varint,2,opt,name=descending" json:"descending,omitempty"`
	HasLimit             *bool            `protobuf:"varint,3,opt,name=has_limit,json=hasLimit" json:"has_limit,omitempty"`
	LiveUpdating         *bool            `protobuf:"varint,4,opt,name=live_updating,json=liveUpdating" json:"live_updating,omitempty"`
	LimitMethod          *LimitMethod     `protobuf:"varint,5,opt,name=limit_method,json=limitMethod,enum=itunespb.LimitMethod" json:"limit_method,omitempty"`
	LimitSize            *int32           `protobuf:"varint,6,opt,name=limit_size,json=limitSize" json:"limit_size,omitempty"`
	SortField            *SelectionMethod `protobuf:"varint,7,opt,name=sort_field,json=sortField,enum=itunespb.SelectionMethod" json:"sort_field,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SmartPlaylistInfo) Reset()         { *m = SmartPlaylistInfo{} }
func (m *SmartPlaylistInfo) String() string { return proto.CompactTextString(m) }
func (*SmartPlaylistInfo) ProtoMessage()    {}
func (*SmartPlaylistInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d57b5fa89539e619, []int{0}
}

func (m *SmartPlaylistInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SmartPlaylistInfo.Unmarshal(m, b)
}
func (m *SmartPlaylistInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SmartPlaylistInfo.Marshal(b, m, deterministic)
}
func (m *SmartPlaylistInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmartPlaylistInfo.Merge(m, src)
}
func (m *SmartPlaylistInfo) XXX_Size() int {
	return xxx_messageInfo_SmartPlaylistInfo.Size(m)
}
func (m *SmartPlaylistInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SmartPlaylistInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SmartPlaylistInfo proto.InternalMessageInfo

func (m *SmartPlaylistInfo) GetCheckedOnly() bool {
	if m != nil && m.CheckedOnly != nil {
		return *m.CheckedOnly
	}
	return false
}

func (m *SmartPlaylistInfo) GetDescending() bool {
	if m != nil && m.Descending != nil {
		return *m.Descending
	}
	return false
}

func (m *SmartPlaylistInfo) GetHasLimit() bool {
	if m != nil && m.HasLimit != nil {
		return *m.HasLimit
	}
	return false
}

func (m *SmartPlaylistInfo) GetLiveUpdating() bool {
	if m != nil && m.LiveUpdating != nil {
		return *m.LiveUpdating
	}
	return false
}

func (m *SmartPlaylistInfo) GetLimitMethod() LimitMethod {
	if m != nil && m.LimitMethod != nil {
		return *m.LimitMethod
	}
	return LimitMethod_minutes
}

func (m *SmartPlaylistInfo) GetLimitSize() int32 {
	if m != nil && m.LimitSize != nil {
		return *m.LimitSize
	}
	return 0
}

func (m *SmartPlaylistInfo) GetSortField() SelectionMethod {
	if m != nil && m.SortField != nil {
		return *m.SortField
	}
	return SelectionMethod_limit_lowest_rating
}

type SmartPlaylistRule struct {
	Type                 *RuleType                `protobuf:"varint,1,opt,name=type,enum=itunespb.RuleType" json:"type,omitempty"`
	Field                *Field                   `protobuf:"varint,2,opt,name=field,enum=itunespb.Field" json:"field,omitempty"`
	Sign                 *LogicSign               `protobuf:"varint,3,opt,name=sign,enum=itunespb.LogicSign" json:"sign,omitempty"`
	Operator             *LogicRule               `protobuf:"varint,4,opt,name=operator,enum=itunespb.LogicRule" json:"operator,omitempty"`
	StringValue          *string                  `protobuf:"bytes,5,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	IntValues            []int64                  `protobuf:"varint,6,rep,name=int_values,json=intValues" json:"int_values,omitempty"`
	BoolValue            *bool                    `protobuf:"varint,7,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	MediaKindValue       *MediaKind               `protobuf:"varint,8,opt,name=media_kind_value,json=mediaKindValue,enum=itunespb.MediaKind" json:"media_kind_value,omitempty"`
	DateValues           []*Time                  `protobuf:"bytes,9,rep,name=date_values,json=dateValues" json:"date_values,omitempty"`
	PlaylistValue        *string                  `protobuf:"bytes,10,opt,name=playlist_value,json=playlistValue" json:"playlist_value,omitempty"`
	LoveValue            *LoveStatus              `protobuf:"varint,11,opt,name=love_value,json=loveValue,enum=itunespb.LoveStatus" json:"love_value,omitempty"`
	IcloudValue          *ICloudStatus            `protobuf:"varint,12,opt,name=icloud_value,json=icloudValue,enum=itunespb.ICloudStatus" json:"icloud_value,omitempty"`
	LocationValue        *LocationStatus          `protobuf:"varint,13,opt,name=location_value,json=locationValue,enum=itunespb.LocationStatus" json:"location_value,omitempty"`
	SubRules             []*SmartPlaylistCriteria `protobuf:"bytes,14,rep,name=sub_rules,json=subRules" json:"sub_rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *SmartPlaylistRule) Reset()         { *m = SmartPlaylistRule{} }
func (m *SmartPlaylistRule) String() string { return proto.CompactTextString(m) }
func (*SmartPlaylistRule) ProtoMessage()    {}
func (*SmartPlaylistRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_d57b5fa89539e619, []int{1}
}

func (m *SmartPlaylistRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SmartPlaylistRule.Unmarshal(m, b)
}
func (m *SmartPlaylistRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SmartPlaylistRule.Marshal(b, m, deterministic)
}
func (m *SmartPlaylistRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmartPlaylistRule.Merge(m, src)
}
func (m *SmartPlaylistRule) XXX_Size() int {
	return xxx_messageInfo_SmartPlaylistRule.Size(m)
}
func (m *SmartPlaylistRule) XXX_DiscardUnknown() {
	xxx_messageInfo_SmartPlaylistRule.DiscardUnknown(m)
}

var xxx_messageInfo_SmartPlaylistRule proto.InternalMessageInfo

func (m *SmartPlaylistRule) GetType() RuleType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return RuleType_RuleType_ruleset_rule
}

func (m *SmartPlaylistRule) GetField() Field {
	if m != nil && m.Field != nil {
		return *m.Field
	}
	return Field_album
}

func (m *SmartPlaylistRule) GetSign() LogicSign {
	if m != nil && m.Sign != nil {
		return *m.Sign
	}
	return LogicSign_int_pos
}

func (m *SmartPlaylistRule) GetOperator() LogicRule {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return LogicRule_other
}

func (m *SmartPlaylistRule) GetStringValue() string {
	if m != nil && m.StringValue != nil {
		return *m.StringValue
	}
	return ""
}

func (m *SmartPlaylistRule) GetIntValues() []int64 {
	if m != nil {
		return m.IntValues
	}
	return nil
}

func (m *SmartPlaylistRule) GetBoolValue() bool {
	if m != nil && m.BoolValue != nil {
		return *m.BoolValue
	}
	return false
}

func (m *SmartPlaylistRule) GetMediaKindValue() MediaKind {
	if m != nil && m.MediaKindValue != nil {
		return *m.MediaKindValue
	}
	return MediaKind_Music
}

func (m *SmartPlaylistRule) GetDateValues() []*Time {
	if m != nil {
		return m.DateValues
	}
	return nil
}

func (m *SmartPlaylistRule) GetPlaylistValue() string {
	if m != nil && m.PlaylistValue != nil {
		return *m.PlaylistValue
	}
	return ""
}

func (m *SmartPlaylistRule) GetLoveValue() LoveStatus {
	if m != nil && m.LoveValue != nil {
		return *m.LoveValue
	}
	return LoveStatus_None
}

func (m *SmartPlaylistRule) GetIcloudValue() ICloudStatus {
	if m != nil && m.IcloudValue != nil {
		return *m.IcloudValue
	}
	return ICloudStatus_Purchased
}

func (m *SmartPlaylistRule) GetLocationValue() LocationStatus {
	if m != nil && m.LocationValue != nil {
		return *m.LocationValue
	}
	return LocationStatus_Computer
}

func (m *SmartPlaylistRule) GetSubRules() []*SmartPlaylistCriteria {
	if m != nil {
		return m.SubRules
	}
	return nil
}

type SmartPlaylistCriteria struct {
	Conjunction          *Conjunction         `protobuf:"varint,1,opt,name=conjunction,enum=itunespb.Conjunction" json:"conjunction,omitempty"`
	Rules                []*SmartPlaylistRule `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SmartPlaylistCriteria) Reset()         { *m = SmartPlaylistCriteria{} }
func (m *SmartPlaylistCriteria) String() string { return proto.CompactTextString(m) }
func (*SmartPlaylistCriteria) ProtoMessage()    {}
func (*SmartPlaylistCriteria) Descriptor() ([]byte, []int) {
	return fileDescriptor_d57b5fa89539e619, []int{2}
}

func (m *SmartPlaylistCriteria) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SmartPlaylistCriteria.Unmarshal(m, b)
}
func (m *SmartPlaylistCriteria) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SmartPlaylistCriteria.Marshal(b, m, deterministic)
}
func (m *SmartPlaylistCriteria) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmartPlaylistCriteria.Merge(m, src)
}
func (m *SmartPlaylistCriteria) XXX_Size() int {
	return xxx_messageInfo_SmartPlaylistCriteria.Size(m)
}
func (m *SmartPlaylistCriteria) XXX_DiscardUnknown() {
	xxx_messageInfo_SmartPlaylistCriteria.DiscardUnknown(m)
}

var xxx_messageInfo_SmartPlaylistCriteria proto.InternalMessageInfo

func (m *SmartPlaylistCriteria) GetConjunction() Conjunction {
	if m != nil && m.Conjunction != nil {
		return *m.Conjunction
	}
	return Conjunction_AND
}

func (m *SmartPlaylistCriteria) GetRules() []*SmartPlaylistRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type SmartPlaylist struct {
	Info                 *SmartPlaylistInfo     `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Criteria             *SmartPlaylistCriteria `protobuf:"bytes,2,opt,name=criteria" json:"criteria,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SmartPlaylist) Reset()         { *m = SmartPlaylist{} }
func (m *SmartPlaylist) String() string { return proto.CompactTextString(m) }
func (*SmartPlaylist) ProtoMessage()    {}
func (*SmartPlaylist) Descriptor() ([]byte, []int) {
	return fileDescriptor_d57b5fa89539e619, []int{3}
}

func (m *SmartPlaylist) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SmartPlaylist.Unmarshal(m, b)
}
func (m *SmartPlaylist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SmartPlaylist.Marshal(b, m, deterministic)
}
func (m *SmartPlaylist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmartPlaylist.Merge(m, src)
}
func (m *SmartPlaylist) XXX_Size() int {
	return xxx_messageInfo_SmartPlaylist.Size(m)
}
func (m *SmartPlaylist) XXX_DiscardUnknown() {
	xxx_messageInfo_SmartPlaylist.DiscardUnknown(m)
}

var xxx_messageInfo_SmartPlaylist proto.InternalMessageInfo

func (m *SmartPlaylist) GetInfo() *SmartPlaylistInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *SmartPlaylist) GetCriteria() *SmartPlaylistCriteria {
	if m != nil {
		return m.Criteria
	}
	return nil
}

func init() {
	proto.RegisterEnum("itunespb.MediaKind", MediaKind_name, MediaKind_value)
	proto.RegisterEnum("itunespb.ICloudStatus", ICloudStatus_name, ICloudStatus_value)
	proto.RegisterEnum("itunespb.LoveStatus", LoveStatus_name, LoveStatus_value)
	proto.RegisterEnum("itunespb.LocationStatus", LocationStatus_name, LocationStatus_value)
	proto.RegisterEnum("itunespb.Conjunction", Conjunction_name, Conjunction_value)
	proto.RegisterEnum("itunespb.LimitMethod", LimitMethod_name, LimitMethod_value)
	proto.RegisterEnum("itunespb.SelectionMethod", SelectionMethod_name, SelectionMethod_value)
	proto.RegisterEnum("itunespb.Field", Field_name, Field_value)
	proto.RegisterEnum("itunespb.LogicSign", LogicSign_name, LogicSign_value)
	proto.RegisterEnum("itunespb.LogicRule", LogicRule_name, LogicRule_value)
	proto.RegisterEnum("itunespb.RuleType", RuleType_name, RuleType_value)
	proto.RegisterType((*SmartPlaylistInfo)(nil), "itunespb.SmartPlaylistInfo")
	proto.RegisterType((*SmartPlaylistRule)(nil), "itunespb.SmartPlaylistRule")
	proto.RegisterType((*SmartPlaylistCriteria)(nil), "itunespb.SmartPlaylistCriteria")
	proto.RegisterType((*SmartPlaylist)(nil), "itunespb.SmartPlaylist")
}

func init() { proto.RegisterFile("smart.proto", fileDescriptor_d57b5fa89539e619) }

var fileDescriptor_d57b5fa89539e619 = []byte{
	// 1611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x4b, 0x8f, 0x1c, 0x49,
	0x11, 0x76, 0xf5, 0x63, 0xba, 0x2a, 0xfa, 0x31, 0xe9, 0x5c, 0xcf, 0x6c, 0xdb, 0xfb, 0x1a, 0xbc,
	0x32, 0x3b, 0xf4, 0xc1, 0x16, 0x46, 0x62, 0x77, 0xc5, 0x82, 0xbd, 0xb6, 0x97, 0xc5, 0x82, 0xf1,
	0x98, 0x1a, 0xdb, 0x12, 0xa7, 0x56, 0x76, 0x55, 0x4e, 0x77, 0x32, 0x55, 0x99, 0xa5, 0xcc, 0xac,
	0x19, 0xc6, 0x12, 0x52, 0x6b, 0x77, 0x41, 0x1c, 0x39, 0x70, 0xe2, 0xca, 0x91, 0x13, 0xff, 0x00,
	0x89, 0x1f, 0xc1, 0xdf, 0x41, 0x11, 0x59, 0xfd, 0x18, 0x83, 0x25, 0x4e, 0x55, 0x11, 0x5f, 0x44,
	0xe4, 0x17, 0x91, 0x91, 0x19, 0x09, 0x7d, 0x57, 0x0a, 0xeb, 0xef, 0x56, 0xd6, 0x78, 0xc3, 0x63,
	0xe5, 0x6b, 0x2d, 0x5d, 0x35, 0xbb, 0x05, 0x5e, 0x95, 0x32, 0x68, 0x6f, 0xff, 0xbd, 0x05, 0xd7,
	0x4f, 0xd0, 0xea, 0x79, 0x21, 0x2e, 0x0b, 0xe5, 0xfc, 0x53, 0x7d, 0x6a, 0xf8, 0xf7, 0x60, 0x90,
	0x2d, 0x64, 0x76, 0x26, 0xf3, 0xa9, 0xd1, 0xc5, 0xe5, 0x38, 0x3a, 0x88, 0x0e, 0xe3, 0xb4, 0xdf,
	0xe8, 0x8e, 0x75, 0x71, 0xc9, 0x3f, 0x04, 0xc8, 0xa5, 0xcb, 0xa4, 0xce, 0x95, 0x9e, 0x8f, 0x5b,
	0x64, 0xb0, 0xa5, 0xe1, 0xef, 0x41, 0xb2, 0x10, 0x6e, 0x5a, 0xa8, 0x52, 0xf9, 0x71, 0x9b, 0xe0,
	0x78, 0x21, 0xdc, 0xaf, 0x50, 0xe6, 0x1f, 0xc3, 0xb0, 0x50, 0xe7, 0x72, 0x5a, 0x57, 0xb9, 0xf0,
	0xe8, 0xdf, 0x21, 0x83, 0x01, 0x2a, 0x5f, 0x36, 0x3a, 0xfe, 0x19, 0x0c, 0xc8, 0x7b, 0x5a, 0x4a,
	0xbf, 0x30, 0xf9, 0xb8, 0x7b, 0x10, 0x1d, 0x8e, 0xee, 0xef, 0xdd, 0x5d, 0xe5, 0x71, 0x97, 0x62,
	0x1d, 0x11, 0x98, 0xf6, 0x8b, 0x8d, 0xc0, 0x3f, 0x00, 0x08, 0x9e, 0x4e, 0xbd, 0x96, 0xe3, 0x9d,
	0x83, 0xe8, 0xb0, 0x9b, 0x26, 0xa4, 0x39, 0x51, 0xaf, 0x25, 0xff, 0x0c, 0xc0, 0x19, 0xeb, 0xa7,
	0xa7, 0x4a, 0x16, 0xf9, 0xb8, 0x47, 0x61, 0x6f, 0x6e, 0xc2, 0x9e, 0xc8, 0x42, 0x66, 0x5e, 0x19,
	0xdd, 0x84, 0x4e, 0xd0, 0xf8, 0xe7, 0x68, 0x7b, 0xfb, 0x6f, 0xdd, 0x37, 0xaa, 0x95, 0xd6, 0x85,
	0xe4, 0xdf, 0x87, 0x8e, 0xbf, 0xac, 0x24, 0x55, 0x69, 0x74, 0x9f, 0x6f, 0x22, 0x21, 0xfa, 0xe2,
	0xb2, 0x92, 0x29, 0xe1, 0xfc, 0x0e, 0x74, 0xc3, 0x92, 0x2d, 0x32, 0xdc, 0xdd, 0x18, 0x52, 0xf4,
	0x34, 0xa0, 0xfc, 0x13, 0xe8, 0x38, 0x35, 0xd7, 0x54, 0xb4, 0xd1, 0xfd, 0x77, 0xb6, 0xf2, 0x35,
	0x73, 0x95, 0x9d, 0xa8, 0xb9, 0x4e, 0xc9, 0x80, 0xdf, 0x83, 0xd8, 0x54, 0xd2, 0x0a, 0x6f, 0x2c,
	0x15, 0xf0, 0xbf, 0x8d, 0x91, 0x40, 0xba, 0x36, 0xc2, 0x6d, 0x75, 0xde, 0x2a, 0x3d, 0x9f, 0x9e,
	0x8b, 0xa2, 0x96, 0x54, 0xd1, 0x24, 0xed, 0x07, 0xdd, 0x2b, 0x54, 0x61, 0xe9, 0x94, 0xf6, 0x01,
	0x77, 0xe3, 0x9d, 0x83, 0xf6, 0x61, 0x3b, 0x4d, 0x94, 0xf6, 0x84, 0x3a, 0x84, 0x67, 0xc6, 0x14,
	0x8d, 0x7f, 0x8f, 0x76, 0x2d, 0x41, 0x4d, 0xf0, 0xfe, 0x29, 0xb0, 0x52, 0xe6, 0x4a, 0x4c, 0xcf,
	0x94, 0xce, 0x1b, 0xa3, 0xf8, 0x4d, 0x66, 0x47, 0x68, 0xf1, 0x4b, 0xa5, 0xf3, 0x74, 0x54, 0xae,
	0x7e, 0x83, 0xfb, 0x3d, 0xe8, 0xe7, 0xc2, 0xcb, 0xd5, 0xea, 0xc9, 0x41, 0xfb, 0xb0, 0x7f, 0x7f,
	0xb4, 0xf1, 0x7c, 0xa1, 0x4a, 0x99, 0x02, 0x9a, 0x34, 0x74, 0xee, 0xc0, 0xa8, 0x6a, 0x76, 0xa2,
	0x59, 0x0d, 0x28, 0xa5, 0xe1, 0x4a, 0x1b, 0xe2, 0xfe, 0x08, 0xa0, 0x30, 0xe7, 0x4d, 0xdc, 0x71,
	0x9f, 0x08, 0xdd, 0xd8, 0x2e, 0xd5, 0xb9, 0x3c, 0xf1, 0xc2, 0xd7, 0x2e, 0x4d, 0xd0, 0x2e, 0x38,
	0x7d, 0x0e, 0x03, 0x95, 0x15, 0xa6, 0x5e, 0xe5, 0x31, 0x20, 0xb7, 0xfd, 0x8d, 0xdb, 0xd3, 0xc7,
	0x88, 0x36, 0x8e, 0xfd, 0x60, 0x1b, 0x5c, 0x1f, 0xc0, 0xa8, 0x30, 0x99, 0xc0, 0x1e, 0x6a, 0x9c,
	0x87, 0xe4, 0x3c, 0xde, 0x5e, 0x33, 0xe0, 0x8d, 0xfb, 0x70, 0x65, 0x1f, 0x02, 0x7c, 0x01, 0x89,
	0xab, 0x67, 0x53, 0x5b, 0x17, 0xd2, 0x8d, 0x47, 0x54, 0x86, 0x8f, 0xb6, 0x1a, 0x74, 0xbb, 0x03,
	0x1f, 0x5b, 0xe5, 0xa5, 0x55, 0x22, 0x8d, 0x5d, 0x3d, 0xc3, 0xfd, 0x76, 0xb7, 0xbf, 0x8d, 0x60,
	0xef, 0x7f, 0xda, 0xf0, 0x4f, 0xa1, 0x9f, 0x19, 0xfd, 0xdb, 0x5a, 0x53, 0x7f, 0x37, 0x0d, 0xbb,
	0x75, 0xa2, 0x1e, 0x6f, 0xc0, 0x74, 0xdb, 0x92, 0xff, 0x10, 0xba, 0x81, 0x4c, 0x8b, 0xc8, 0xbc,
	0xf7, 0x16, 0x32, 0xd4, 0x6f, 0xc1, 0xf2, 0xf6, 0xef, 0x61, 0x78, 0x05, 0xe3, 0xf7, 0xa0, 0xa3,
	0xf4, 0xa9, 0xa1, 0x55, 0xdf, 0x1e, 0x02, 0xef, 0x9f, 0x94, 0x0c, 0xf9, 0x4f, 0x20, 0xce, 0x1a,
	0xe6, 0x74, 0x64, 0xfe, 0x9f, 0x22, 0xac, 0x1c, 0x26, 0xdf, 0xb6, 0x20, 0x59, 0x77, 0x1a, 0x4f,
	0xa0, 0x7b, 0x54, 0x3b, 0x95, 0xb1, 0x88, 0x7e, 0xcd, 0xb9, 0x92, 0xac, 0xc5, 0xfb, 0xd0, 0x7b,
	0x6e, 0xf2, 0x4c, 0x38, 0xcf, 0x3a, 0x7c, 0x08, 0xc9, 0x97, 0x75, 0xae, 0xcc, 0xcc, 0x98, 0x33,
	0x16, 0xf3, 0x11, 0x00, 0x79, 0xbc, 0x52, 0xb9, 0x34, 0xec, 0x80, 0x03, 0xec, 0xbc, 0x78, 0x75,
	0xb2, 0x30, 0x17, 0xec, 0x21, 0x1f, 0x41, 0xf2, 0x0b, 0x53, 0xca, 0x00, 0x2d, 0x63, 0xce, 0x61,
	0xf0, 0xf4, 0x05, 0xf2, 0xfa, 0xea, 0x77, 0xde, 0x0a, 0xc7, 0x96, 0xcb, 0x0e, 0xdf, 0x85, 0xe4,
	0x95, 0x51, 0x99, 0x3c, 0x92, 0xa5, 0x61, 0xcb, 0x25, 0x3a, 0xf5, 0x82, 0xd1, 0x4b, 0xb6, 0x5c,
	0x2e, 0x23, 0xde, 0x87, 0xce, 0x23, 0x5c, 0x6a, 0xb9, 0x5c, 0xee, 0xf0, 0x7d, 0xd8, 0x45, 0xe1,
	0xd8, 0x6e, 0x28, 0xfc, 0x09, 0xf5, 0x0c, 0xe0, 0xd8, 0x2f, 0xa4, 0x0d, 0xe4, 0xff, 0xf1, 0xaf,
	0x87, 0x7c, 0x0f, 0x46, 0x2f, 0x75, 0x2e, 0x9d, 0xb2, 0x32, 0x0f, 0xda, 0xef, 0x96, 0xdf, 0x44,
	0x57, 0xd4, 0xe4, 0xc1, 0xbe, 0xfb, 0xe7, 0x37, 0xd1, 0xe4, 0x14, 0x06, 0xdb, 0x6d, 0x8a, 0x49,
	0x3e, 0xaf, 0x6d, 0xb6, 0x10, 0x4e, 0xe6, 0x0c, 0x39, 0xf4, 0x8e, 0x84, 0xcf, 0x16, 0x32, 0x67,
	0x2d, 0x3e, 0x80, 0xf8, 0x65, 0x55, 0x18, 0x91, 0xcb, 0x9c, 0xb5, 0x31, 0xff, 0xa7, 0x5a, 0x16,
	0x6a, 0xae, 0x66, 0x85, 0x0c, 0xe5, 0xc1, 0x9e, 0x2d, 0xf0, 0xf2, 0x67, 0x5d, 0x14, 0x9f, 0xd4,
	0x55, 0xa1, 0x32, 0xe1, 0x25, 0xdb, 0x99, 0xdc, 0x03, 0xd8, 0x9c, 0x22, 0x1e, 0x43, 0xe7, 0x99,
	0xd1, 0x92, 0x5d, 0xc3, 0x62, 0xa3, 0xbe, 0x09, 0xff, 0x44, 0xb9, 0x42, 0x9d, 0x61, 0xf8, 0xc9,
	0x04, 0x46, 0x57, 0x8f, 0x00, 0xe2, 0x8f, 0x4d, 0x59, 0xd5, 0x5e, 0x5a, 0x16, 0x61, 0xb9, 0x15,
	0x11, 0x67, 0x6c, 0xf2, 0x21, 0xf4, 0xb7, 0x1a, 0x93, 0xf7, 0xa0, 0xfd, 0xe5, 0xb3, 0x27, 0xec,
	0x1a, 0xdf, 0x81, 0xd6, 0x71, 0xca, 0xa2, 0xc9, 0x43, 0xe8, 0x6f, 0x8d, 0x02, 0x4c, 0xaa, 0x54,
	0xba, 0xf6, 0xd2, 0xb1, 0x08, 0x6d, 0x8e, 0x1e, 0xb1, 0x16, 0x12, 0x51, 0x5e, 0x96, 0x8e, 0xb5,
	0xf1, 0x77, 0x61, 0x6a, 0xeb, 0x58, 0x07, 0xd1, 0xaf, 0x1f, 0xb1, 0xee, 0xe4, 0xdf, 0x11, 0xec,
	0xbe, 0x71, 0xed, 0xf3, 0x77, 0xe1, 0x9d, 0x30, 0x44, 0x0a, 0x73, 0x21, 0x9d, 0x9f, 0x5a, 0x9a,
	0x4a, 0x2c, 0xe2, 0x6c, 0x35, 0x97, 0xac, 0xd0, 0xb9, 0x29, 0x59, 0x0b, 0x6b, 0x15, 0x34, 0x5a,
	0x94, 0x92, 0x75, 0xf9, 0x2e, 0x84, 0x71, 0x34, 0x15, 0xc5, 0xac, 0x2e, 0xd9, 0xce, 0xc6, 0x45,
	0x58, 0xaf, 0x9c, 0x67, 0xbd, 0x8d, 0xc9, 0x5c, 0x6a, 0x2b, 0x59, 0xc2, 0x6f, 0x00, 0x0b, 0x0a,
	0xba, 0x01, 0x45, 0x8e, 0xbb, 0xb0, 0xb7, 0xd1, 0xe2, 0x85, 0x36, 0xcd, 0x4c, 0xad, 0x3d, 0xbb,
	0xb9, 0xa1, 0x46, 0x5a, 0x72, 0xa8, 0x7d, 0xc6, 0x6e, 0x6d, 0x53, 0x23, 0xb2, 0xef, 0x4f, 0xfe,
	0xd2, 0x85, 0x2e, 0x4d, 0x17, 0x4c, 0x3b, 0xd0, 0x69, 0xa3, 0x19, 0xfd, 0xae, 0xe8, 0x7c, 0x8d,
	0xe5, 0x6e, 0xfe, 0x3b, 0xb8, 0x11, 0xb8, 0xab, 0x73, 0x63, 0x2f, 0xd9, 0xa7, 0x24, 0x99, 0xb2,
	0x94, 0xda, 0x3b, 0x36, 0x6a, 0xa4, 0xca, 0x38, 0x69, 0x19, 0xc7, 0x24, 0x70, 0xe2, 0x5b, 0x55,
	0x61, 0xdd, 0xd8, 0x8f, 0x71, 0x8d, 0x90, 0x4f, 0x8c, 0x96, 0x73, 0x6b, 0xea, 0x0a, 0x69, 0x7c,
	0x82, 0x1d, 0x81, 0x23, 0x81, 0x25, 0x68, 0xe2, 0x95, 0x2f, 0xf0, 0xf8, 0xc5, 0xd0, 0x71, 0x78,
	0xa0, 0x7e, 0x86, 0x05, 0xa4, 0x89, 0x1c, 0x08, 0x1e, 0x63, 0xda, 0x1b, 0xb9, 0x21, 0xf6, 0x6b,
	0x7e, 0x1d, 0x86, 0xa4, 0x5d, 0x33, 0x48, 0xb1, 0x0d, 0x49, 0x45, 0x85, 0x7f, 0xb6, 0x16, 0x29,
	0xec, 0x09, 0xe6, 0x79, 0x8e, 0x67, 0x74, 0x55, 0x8e, 0xdf, 0xe0, 0xea, 0xb3, 0x69, 0x35, 0x2d,
	0xd9, 0xc7, 0x48, 0x70, 0x16, 0x2a, 0xd5, 0x6c, 0x19, 0x86, 0x55, 0x05, 0xb5, 0x24, 0xfb, 0x88,
	0x72, 0x53, 0xee, 0x6c, 0xaa, 0xeb, 0x72, 0x26, 0x2d, 0x1b, 0xa3, 0x2b, 0x96, 0xdb, 0xb1, 0x7d,
	0xac, 0x56, 0x13, 0xf1, 0x26, 0x76, 0x5b, 0xd5, 0xdc, 0x21, 0x9f, 0xa3, 0x93, 0x13, 0x65, 0x55,
	0xc8, 0x10, 0x76, 0x07, 0x2d, 0x9d, 0x14, 0xce, 0x68, 0xf6, 0x80, 0xd2, 0x55, 0xaf, 0x25, 0x1b,
	0x60, 0x28, 0x77, 0xa6, 0x2a, 0xc7, 0x9e, 0x20, 0x8b, 0xbc, 0xb6, 0x61, 0xd1, 0x21, 0x12, 0xf6,
	0x56, 0x64, 0xeb, 0x55, 0xfb, 0xe8, 0x74, 0x29, 0x85, 0x0d, 0x1d, 0x83, 0x0f, 0x2a, 0x61, 0xfd,
	0x85, 0xb1, 0x67, 0xec, 0x0e, 0x26, 0x5b, 0xad, 0xcf, 0xf2, 0x0f, 0x90, 0x48, 0xf3, 0x3e, 0x63,
	0x1f, 0x60, 0x41, 0xb7, 0xfa, 0x88, 0x61, 0xe9, 0x48, 0x2e, 0x4d, 0xae, 0x4e, 0x95, 0xcc, 0x19,
	0x50, 0x07, 0x0a, 0x17, 0x7a, 0x48, 0xe6, 0xec, 0x5d, 0x6a, 0x1e, 0x54, 0x20, 0xb5, 0x4a, 0xe6,
	0xec, 0x2b, 0x8c, 0xb2, 0x19, 0xe7, 0xec, 0x0b, 0x7e, 0x0b, 0xf6, 0xd7, 0xe3, 0xb6, 0x92, 0xd6,
	0x29, 0xe7, 0xa5, 0xf6, 0x53, 0x95, 0xb3, 0x43, 0x9e, 0x40, 0x07, 0x67, 0x27, 0xfb, 0x6b, 0xc4,
	0x39, 0x0c, 0x9b, 0xc9, 0xe9, 0xe8, 0x68, 0xb3, 0x3f, 0x46, 0x7c, 0x08, 0xf1, 0x6a, 0xc4, 0xb1,
	0x3f, 0x44, 0x93, 0x07, 0x78, 0x9b, 0x34, 0xaf, 0x19, 0x64, 0x8e, 0x6f, 0x8e, 0xca, 0x38, 0x76,
	0x0d, 0x05, 0xe7, 0x2d, 0x09, 0xd1, 0x0a, 0xd1, 0x72, 0x1e, 0x6e, 0x6b, 0x44, 0x50, 0x68, 0x4f,
	0x2e, 0x9a, 0x00, 0xf4, 0x00, 0x4b, 0xa0, 0x6b, 0xe8, 0xce, 0xa3, 0x3b, 0x41, 0xa1, 0x27, 0x35,
	0xaa, 0xf6, 0x42, 0x69, 0x17, 0x0e, 0xa8, 0xf3, 0xc2, 0x7a, 0x77, 0xa1, 0xfc, 0x22, 0xb4, 0xb8,
	0xd4, 0x79, 0x90, 0x62, 0xac, 0xc4, 0xdc, 0x4a, 0xe1, 0xa5, 0xf5, 0x0b, 0xa1, 0x19, 0x43, 0xb8,
	0x90, 0xce, 0x91, 0xf4, 0x90, 0x0f, 0xa0, 0x37, 0x93, 0xfe, 0x42, 0x4a, 0xcd, 0x96, 0xad, 0xc9,
	0x9f, 0x5b, 0x10, 0xaf, 0xde, 0x75, 0xfc, 0x26, 0xec, 0xad, 0xfe, 0xc3, 0xb0, 0x96, 0x9e, 0xbe,
	0x2c, 0xe2, 0x63, 0xb8, 0xb1, 0x86, 0x9a, 0x47, 0x17, 0x21, 0x2d, 0xbe, 0x07, 0xd7, 0xd7, 0x08,
	0x66, 0x47, 0xea, 0xf6, 0x95, 0x58, 0xf8, 0xa2, 0x92, 0x42, 0x07, 0xa8, 0xc3, 0xf7, 0x81, 0xaf,
	0x21, 0xda, 0x46, 0xd2, 0x77, 0xf9, 0xfb, 0x30, 0x5e, 0xeb, 0xb7, 0xde, 0x5d, 0x84, 0xee, 0xe0,
	0x6e, 0xad, 0xd1, 0xf5, 0xb6, 0x11, 0xd6, 0xbb, 0x12, 0x91, 0x9e, 0x46, 0xa4, 0x8f, 0xf1, 0x66,
	0x59, 0xeb, 0xc3, 0x16, 0x12, 0x90, 0x5c, 0x09, 0xb6, 0x7e, 0xdb, 0x10, 0x06, 0xff, 0x09, 0x00,
	0x00, 0xff, 0xff, 0x84, 0x51, 0x29, 0xd2, 0x67, 0x0c, 0x00, 0x00,
}
